// Question - https://leetcode.com/problems/shortest-path-in-a-grid-with-obstacles-elimination/
// Answer in cpp


class Solution {
    int ans=INT_MAX;
public:
    int shortestPath(vector<vector<int>>& grid, int k) {
        vector<vector<int>> dir{{1,0},{-1,0},{0,1},{0,-1}};
        int m = grid.size(),n=grid[0].size();
        queue<vector<int>> que;
        bool visited [41][41][1601];
        que.push({0,0,k});
        int step = 0;
        memset(visited,false,sizeof(visited));
        while(!que.empty()){
            int size = que.size();
            while(size--){
                vector<int> temp = que.front();
                que.pop();
                int curr_i = temp[0],curr_j=temp[1],obs=temp[2];
                if(curr_i==m-1 && curr_j==n-1) return step;
                for(int i=0;i<4;i++){
                    int new_i=curr_i+dir[i][0];
                    int new_j=curr_j+dir[i][1];
                    
                    if(new_i<0 || new_i>=m || new_j<0 || new_j>=n) continue;
                    if(grid[new_i][new_j]==0 && !visited[new_i][new_j][obs]){
                        que.push({new_i,new_j,obs});
                        visited[new_i][new_j][obs] = true;
                    } else if(grid[new_i][new_j]==1 &&obs>0 && !visited[new_i][new_j][obs-1]){
                        que.push({new_i,new_j,obs-1});
                        visited[new_i][new_j][obs-1] = true;
                    }
                }
            }
            step++;
            
        }
       
        return -1;
    }
    

};
