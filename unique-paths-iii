// Question - https://leetcode.com/problems/unique-paths-iii/description/
// Answer in cpp


class Solution {
    int ans = 0;
public:
    int uniquePathsIII(vector<vector<int>>& grid) {
        int zeroCount =0,si=0,sj=0;
        int row = grid.size(), col = grid[0].size();
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(grid[i][j]==1){
                    si = i;
                    sj = j;
                }
                else if(grid[i][j]==0){
                    zeroCount++;
                }
            }
        }
        
        return dfs(grid,si,sj,row,col,zeroCount);
    }
    int dfs(vector<vector<int>>& grid, int i,int j, int row,int col, int count){
        if(i<0 || j<0 || i>=row || j>=col || grid[i][j]==-1 ) return 0;

       if(grid[i][j]==2 ) {
          return count==-1?1:0;
       }
        count--;
        grid[i][j] = -1;
        int totalPath = dfs(grid,i+1,j,row,col,count)
            + dfs(grid,i-1,j,row,col,count)
            + dfs(grid,i,j+1,row,col,count)
            + dfs(grid,i,j-1,row,col,count);
            grid[i][j] = 0;
        count++;
        return totalPath;
    }
};
