//Question - https://leetcode.com/problems/longest-valid-parentheses/
//Answer in cpp

1.
class Solution {
public:
    int longestValidParentheses(string s) {
        stack<int> st;
        int max=0;
        int temp=0;
        st.push(-1);
        for(int i=0;i<s.size();i++){
            if(s[i]=='('){
                st.push(i);
                
            } else{
                st.pop();
                if(!st.empty()){
                     max=std::max(max,i-st.top());          
                  
                } else{
                    st.push(i);
                }
            }
        }
                
        
        return max;
    }
};





class Solution {
public:
    int longestValidParentheses(string s) {
        int open=0,close=0;
        int max=0;
        for(int i=0;i<s.size();i++){
            if(s[i]=='('){
               open++;
                
            } else{
                close++;
            }
            if(open ==close){
                max=std::max(max,open+close);
            }
            if(close>open){
                open=0;
                close=0;
            }
        }
         open=0;
         close=0;
         for(int i=s.size()-1;i>=0;i--){
            if(s[i]=='('){
               open++;
                
            } else{
                close++;
            }
            if(open ==close){
                max=std::max(max,open+close);
            }
            if(close<open){
                open=0;
                close=0;
            }
        }
                
        
        return max;
    }
};


2. 

class Solution {
public:
    int longestValidParentheses(string s) {
        int open=0,close=0;
        int max=0;
        for(int i=0;i<s.size();i++){
            if(s[i]=='('){
               open++;
                
            } else{
                close++;
            }
            if(open ==close){
                max=std::max(max,open+close);
            }
            if(close>open){
                open=0;
                close=0;
            }
        }
         open=0;
         close=0;
         for(int i=s.size()-1;i>=0;i--){
            if(s[i]=='('){
               open++;
                
            } else{
                close++;
            }
            if(open ==close){
                max=std::max(max,open+close);
            }
            if(close<open){
                open=0;
                close=0;
            }
        }
                
        
        return max;
    }
};
