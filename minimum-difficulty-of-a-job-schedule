// Question - https://leetcode.com/problems/minimum-difficulty-of-a-job-schedule/
// Answer in cpp


class Solution {
    vector<vector<int>> dp;
public:
    int minDifficulty(vector<int>& jobDifficulty, int d) {
        if(d>jobDifficulty.size()) return -1;
        dp = vector(d+1,vector(jobDifficulty.size()+1,-1));
        
        return partition(jobDifficulty,d,0,jobDifficulty.size());
    }
    
    int partition(vector<int>& job, int d, int start,int end){
        if(dp[d][start]!=-1) return dp[d][start];
        if(d==1){
            int mx=0;
            for(int i=start;i<end;i++){
                mx = max(mx,job[i]);
            }
            
            return mx;
        }
        
        int mx=0;
        int res=INT_MAX;
        for(int i=start;i<end-d+1;i++){
            mx=max(mx,job[i]);
            res= min(res,mx+partition(job,d-1,i+1,end));
        }
        return dp[d][start]=res;
        
    }
};
